"""
Westend Hackathon - Egyszer≈± Line√°ris Regresszi√≥ Demo
====================================================

Ez a script egy egyszer≈±s√≠tett line√°ris regresszi√≥s modellt mutat be
demonstr√°ci√≥s c√©lokra. K√∂nnyen √©rthet≈ë √©s gyorsan futtathat√≥.

Ide√°lis hackathon prezent√°ci√≥khoz √©s oktat√°si c√©lokra.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_percentage_error
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')

class SimpleLinearDemo:
    def __init__(self):
        self.model = None
        self.feature_names = None
        self.scaler_params = None
        
    def load_data(self):
        """
        Egyszer≈±s√≠tett adatok bet√∂lt√©se
        """
        print("üìä Adatok bet√∂lt√©se...")
        
        try:
            data = pd.read_csv('data/hackathon_data.csv')
            data['datum'] = pd.to_datetime(data['datum'])
            print(f"‚úÖ {len(data)} nap adatai bet√∂ltve")
            return data
        except FileNotFoundError:
            print("‚ùå Adatf√°jl nem tal√°lhat√≥!")
            print("üîß Futtassa el≈ëbb: python src/data_preparation.py")
            return None
    
    def prepare_simple_features(self, data):
        """
        Egyszer≈± jellemz≈ëk el≈ëk√©sz√≠t√©se (csak a legfontosabbak)
        """
        print("üîß Egyszer≈± jellemz≈ëk el≈ëk√©sz√≠t√©se...")
        
        # Csak a leg√©rthet≈ëbb jellemz≈ëk
        features = pd.DataFrame()
        features['homerseklet'] = data['atlaghomerseklet']
        features['csapadek'] = data['csapadek'] 
        features['marketing'] = data['marketing_kiadas']
        features['hetvege'] = data['hetvege']
        features['unnepnap'] = data['unnepnap']
        features['iskolai_szunet'] = data['iskolai_szunet']
        
        # Egyszer≈± sz√°rmaztatott jellemz≈ëk
        features['jo_ido'] = ((features['homerseklet'] > 15) & 
                             (features['homerseklet'] < 25) & 
                             (features['csapadek'] < 1)).astype(int)
        
        features['rossz_ido'] = ((features['homerseklet'] < 5) | 
                                (features['csapadek'] > 5)).astype(int)
        
        features['magas_marketing'] = (features['marketing'] > 500).astype(int)
        
        # Interakci√≥: h√©tv√©ge + j√≥ id≈ë
        features['hetvege_jo_ido'] = features['hetvege'] * features['jo_ido']
        
        self.feature_names = features.columns.tolist()
        
        print(f"‚úÖ {len(self.feature_names)} egyszer≈± jellemz≈ë k√©sz√≠tve")
        return features
    
    def train_simple_model(self, X, y):
        """
        Egyszer≈± line√°ris regresszi√≥ betan√≠t√°sa
        """
        print("ü§ñ Egyszer≈± line√°ris modell betan√≠t√°sa...")
        
        # Train-test feloszt√°s
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )
        
        # Line√°ris regresszi√≥
        self.model = LinearRegression()
        self.model.fit(X_train, y_train)
        
        # El≈ërejelz√©sek
        y_pred_train = self.model.predict(X_train)
        y_pred_test = self.model.predict(X_test)
        
        # √ârt√©kel√©s
        train_r2 = r2_score(y_train, y_pred_train)
        test_r2 = r2_score(y_test, y_pred_test)
        test_rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))
        test_mape = mean_absolute_percentage_error(y_test, y_pred_test) * 100
        
        print(f"‚úÖ Modell betan√≠tva!")
        print(f"   Train R¬≤: {train_r2:.4f}")
        print(f"   Test R¬≤: {test_r2:.4f}")
        print(f"   Test RMSE: {test_rmse:.0f} f≈ë")
        print(f"   Test MAPE: {test_mape:.2f}%")
        
        return X_train, X_test, y_train, y_test, y_pred_test
    
    def explain_model(self):
        """
        Modell magyar√°zata egyszer≈± nyelvezet
        """
        print("\nüîç MODELL MAGYAR√ÅZAT")
        print("=" * 50)
        print("A modell egy egyszer≈± matematikai k√©plet:")
        print("L√°togat√≥sz√°m = Konstans + (T√©nyez≈ë1 √ó S√∫ly1) + (T√©nyez≈ë2 √ó S√∫ly2) + ...")
        print()
        
        print("üìä T√âNYEZ≈êK HAT√ÅSA:")
        print("-" * 30)
        
        # Koefficiensek √©rtelmez√©se
        for i, (feature, coef) in enumerate(zip(self.feature_names, self.model.coef_)):
            effect = "pozit√≠v" if coef > 0 else "negat√≠v"
            strength = "er≈ës" if abs(coef) > 1000 else "k√∂zepes" if abs(coef) > 500 else "gyenge"
            
            print(f"{feature:20}: {coef:8.0f} ({strength} {effect} hat√°s)")
        
        print(f"{'Alap√©rt√©k':20}: {self.model.intercept_:8.0f}")
        
        print("\nüí° √âRTELMEZ√âS:")
        print("- Pozit√≠v sz√°m = n√∂veli a l√°togat√≥sz√°mot")
        print("- Negat√≠v sz√°m = cs√∂kkenti a l√°togat√≥sz√°mot") 
        print("- Nagyobb abszol√∫t √©rt√©k = er≈ësebb hat√°s")
    
    def create_visualizations(self, X_test, y_test, y_pred_test):
        """
        Egyszer≈± vizualiz√°ci√≥k
        """
        print("\nüìà Vizualiz√°ci√≥k k√©sz√≠t√©se...")
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        
        # 1. El≈ërejelz√©s vs Val√≥s√°g
        axes[0,0].scatter(y_test, y_pred_test, alpha=0.6, color='blue')
        axes[0,0].plot([y_test.min(), y_test.max()], 
                      [y_test.min(), y_test.max()], 'r--', lw=2)
        axes[0,0].set_xlabel('Val√≥s L√°togat√≥sz√°m')
        axes[0,0].set_ylabel('El≈ërejelzett L√°togat√≥sz√°m')
        axes[0,0].set_title('El≈ërejelz√©s Pontoss√°ga')
        axes[0,0].grid(True, alpha=0.3)
        
        # 2. T√©nyez≈ëk fontoss√°ga
        coefs = self.model.coef_
        colors = ['green' if c > 0 else 'red' for c in coefs]
        axes[0,1].barh(self.feature_names, coefs, color=colors, alpha=0.7)
        axes[0,1].set_xlabel('Hat√°s Er≈ëss√©ge')
        axes[0,1].set_title('T√©nyez≈ëk Hat√°sa')
        axes[0,1].grid(True, alpha=0.3)
        
        # 3. Hiba eloszl√°s
        residuals = y_test - y_pred_test
        axes[1,0].hist(residuals, bins=20, alpha=0.7, color='skyblue')
        axes[1,0].set_xlabel('El≈ërejelz√©si Hiba')
        axes[1,0].set_ylabel('Gyakoris√°g')
        axes[1,0].set_title('Hib√°k Eloszl√°sa')
        axes[1,0].grid(True, alpha=0.3)
        
        # 4. Hiba vs El≈ërejelz√©s
        axes[1,1].scatter(y_pred_test, residuals, alpha=0.6, color='orange')
        axes[1,1].axhline(y=0, color='r', linestyle='--')
        axes[1,1].set_xlabel('El≈ërejelzett √ârt√©kek')
        axes[1,1].set_ylabel('Hib√°k')
        axes[1,1].set_title('Hib√°k Mint√°zata')
        axes[1,1].grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig('outputs/simple_linear_demo.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        print("‚úÖ Vizualiz√°ci√≥k k√©sz: outputs/simple_linear_demo.png")
    
    def interactive_prediction(self):
        """
        Interakt√≠v el≈ërejelz√©s demo
        """
        print("\nüîÆ INTERAKT√çV EL≈êREJELZ√âS DEMO")
        print("=" * 50)
        
        scenarios = [
            {
                "n√©v": "Tipikus h√©tk√∂znap",
                "homerseklet": 15, "csapadek": 0, "marketing": 300,
                "hetvege": 0, "unnepnap": 0, "iskolai_szunet": 0
            },
            {
                "n√©v": "H√©tv√©gi j√≥ id≈ë", 
                "homerseklet": 22, "csapadek": 0, "marketing": 500,
                "hetvege": 1, "unnepnap": 0, "iskolai_szunet": 0
            },
            {
                "n√©v": "Es≈ës √ºnnepnap",
                "homerseklet": 12, "csapadek": 8, "marketing": 700,
                "hetvege": 0, "unnepnap": 1, "iskolai_szunet": 0
            },
            {
                "n√©v": "T√©li h√©tv√©ge",
                "homerseklet": -2, "csapadek": 0, "marketing": 400,
                "hetvege": 1, "unnepnap": 0, "iskolai_szunet": 0
            },
            {
                "n√©v": "Ny√°ri cs√∫cs",
                "homerseklet": 28, "csapadek": 0, "marketing": 800,
                "hetvege": 1, "unnepnap": 1, "iskolai_szunet": 1
            }
        ]
        
        predictions = []
        for scenario in scenarios:
            # Jellemz≈ëk el≈ëk√©sz√≠t√©se
            features = [
                scenario["homerseklet"],
                scenario["csapadek"], 
                scenario["marketing"],
                scenario["hetvege"],
                scenario["unnepnap"],
                scenario["iskolai_szunet"]
            ]
            
            # Sz√°rmaztatott jellemz≈ëk
            jo_ido = int((features[0] > 15) and (features[0] < 25) and (features[1] < 1))
            rossz_ido = int((features[0] < 5) or (features[1] > 5))
            magas_marketing = int(features[2] > 500)
            hetvege_jo_ido = features[3] * jo_ido
            
            features.extend([jo_ido, rossz_ido, magas_marketing, hetvege_jo_ido])
            
            # El≈ërejelz√©s
            prediction = self.model.predict([features])[0]
            prediction = max(1000, int(prediction))  # Minimum 1000
            predictions.append(prediction)
            
            print(f"{scenario['n√©v']:20}: {prediction:6,} f≈ë")
        
        print(f"\n√Åtlag el≈ërejelz√©s: {np.mean(predictions):,.0f} f≈ë")
        print(f"Legnagyobb elt√©r√©s: {max(predictions) - min(predictions):,} f≈ë")
        
        return scenarios, predictions
    
    def business_impact(self):
        """
        √úzleti hat√°s sz√°m√≠t√°s
        """
        print("\nüí∞ √úZLETI HAT√ÅS KALKUL√ÅCI√ì")
        print("=" * 50)
        
        # Alapadatok
        avg_visitors = 12000
        spend_per_visitor = 45  # EUR
        daily_revenue = avg_visitors * spend_per_visitor
        
        print(f"Jelenlegi √°tlag l√°togat√≥k: {avg_visitors:,} f≈ë/nap")
        print(f"√Åtlagos k√∂lt√©s: {spend_per_visitor} EUR/f≈ë")
        print(f"Napi bev√©tel: {daily_revenue:,} EUR")
        
        # Modell hasznai
        print(f"\nüéØ MODELL HASZNAI:")
        
        # Marketing optimaliz√°l√°s
        marketing_improvement = 0.15  # 15%
        marketing_benefit = daily_revenue * 365 * marketing_improvement
        print(f"Marketing optimaliz√°l√°s (+15%): {marketing_benefit:,.0f} EUR/√©v")
        
        # Szem√©lyzet optimaliz√°l√°s  
        staff_improvement = 0.20  # 20%
        staff_cost_ratio = 0.12
        staff_benefit = daily_revenue * 365 * staff_cost_ratio * staff_improvement
        print(f"Szem√©lyzet optimaliz√°l√°s (+20%): {staff_benefit:,.0f} EUR/√©v")
        
        # K√©szlet optimaliz√°l√°s
        inventory_improvement = 0.10  # 10%
        inventory_cost_ratio = 0.08
        inventory_benefit = daily_revenue * 365 * inventory_cost_ratio * inventory_improvement
        print(f"K√©szlet optimaliz√°l√°s (+10%): {inventory_benefit:,.0f} EUR/√©v")
        
        total_benefit = marketing_benefit + staff_benefit + inventory_benefit
        print(f"\nüíé √ñSSZES√çTETT HASZON: {total_benefit:,.0f} EUR/√©v")
        
        # ROI
        implementation_cost = 30000  # EUR (egyszer≈± verzi√≥)
        roi = (total_benefit - implementation_cost) / implementation_cost * 100
        payback_months = implementation_cost / (total_benefit / 12)
        
        print(f"\nüìä BEFEKTET√âSI MEGT√âR√úL√âS:")
        print(f"Implement√°ci√≥s k√∂lts√©g: {implementation_cost:,} EUR")
        print(f"ROI (els≈ë √©v): {roi:.0f}%")
        print(f"Megt√©r√ºl√©si id≈ë: {payback_months:.1f} h√≥nap")
        
        if payback_months < 6:
            print("üéâ KIV√ÅL√ì BEFEKTET√âS!")
        elif payback_months < 12:
            print("‚úÖ J√ì BEFEKTET√âS!")
        else:
            print("‚ö†Ô∏è Megfontol√°sra √©rdemes.")
    
    def full_demo(self):
        """
        Teljes demo futtat√°sa
        """
        print("üöÄ EGYSZER≈∞ LINE√ÅRIS REGRESSZI√ì DEMO")
        print("=" * 60)
        print("Hackathon prezent√°ci√≥hoz optimaliz√°lt egyszer≈± modell\n")
        
        # 1. Adatok bet√∂lt√©se
        data = self.load_data()
        if data is None:
            return False
        
        # 2. Jellemz≈ëk el≈ëk√©sz√≠t√©se
        X = self.prepare_simple_features(data)
        y = data['latogatoszam']
        
        # 3. Modell betan√≠t√°sa
        X_train, X_test, y_train, y_test, y_pred_test = self.train_simple_model(X, y)
        
        # 4. Modell magyar√°zata
        self.explain_model()
        
        # 5. Vizualiz√°ci√≥k
        self.create_visualizations(X_test, y_test, y_pred_test)
        
        # 6. Interakt√≠v demo
        scenarios, predictions = self.interactive_prediction()
        
        # 7. √úzleti hat√°s
        self.business_impact()
        
        print(f"\nüéØ DEMO BEFEJEZVE!")
        print("=" * 30)
        print("‚úÖ Egyszer≈±, √©rthet≈ë modell")
        print("‚úÖ Val√≥s el≈ërejelz√©sek")
        print("‚úÖ √úzleti √©rt√©kteremt√©s")
        print("‚úÖ Prezent√°ci√≥ra k√©sz!")
        
        return True

def main():
    """
    F≈ë demo futtat√°s
    """
    demo = SimpleLinearDemo()
    success = demo.full_demo()
    
    if success:
        print(f"\nüé™ PREZENT√ÅCI√ìS TIPPEK:")
        print("1. Kezdje az √ºzleti probl√©m√°val")
        print("2. Mutassa be az egyszer≈± modellt")
        print("3. Demonstr√°lja az el≈ërejelz√©seket")
        print("4. Hangs√∫lyozza az √ºzleti hasznot")
        print("5. Z√°rja a k√∂vetkez≈ë l√©p√©sekkel")
    
if __name__ == "__main__":
    main()
